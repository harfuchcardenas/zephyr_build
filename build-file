#!/usr/bin/perl
use strict;
use warnings;
use Cwd;

# Function to navigate directories interactively
my $build_base = cwd();  # Get current working directory
my $board = 'az3166_iotdevkit';
my $current_dir;
my $zephyr_dir;

sub navigate_directory {
    my $current_dir = cwd();  # Get current working directory
    print "\nCurrent Directory: $current_dir\n";

    # Open and get subdirectories
    opendir(my $dh, $current_dir) or die "Cannot open directory: $!\n";
    my @subdirs = sort grep { -d "$current_dir/$_" && !/^\./ } readdir($dh);
    closedir($dh);

    # If no subdirectories exist, return current directory
    unless (@subdirs) {
        print "No subdirectories found. Storing this directory...\n";
        return $current_dir;
    }

    # List subdirectories for selection
    print "You're building Zephyr OS, and you need to choose a source directory, select a subdirectory:\n";
    for (my $i = 0; $i < @subdirs; $i++) {
        print "$i: $subdirs[$i]\n";
    }

    # User input selection
    print "Select a subdirectory by number, press Enter to confirm, Press B to go back one level or simply E to exit: ";
    my $choice = <STDIN>;
    chomp($choice);

    # If user presses Enter, store current directory
    if ($choice eq '') {
        print "\nSelected source path: $current_dir\n";
	return $current_dir;
    }elsif ($choice =~ /^\d+$/ && $choice >= 0 && $choice < @subdirs) {
        my $selected_dir = $subdirs[$choice];
        chdir("$current_dir/$selected_dir") or die "Failed to enter '$selected_dir': $!\n";
        return navigate_directory();  # Recursively call function
    } elsif($choice =~ /^e$/i) {
        exit 0;
    }elsif ($choice =~ /^b$/i) {
        chdir("..") or die "Failed to climb a level up$!\n";
        return navigate_directory();  # Retry selection
    }else {
        print "Invalid selection. Try again!\n";
        return navigate_directory();  # Retry selection
    }
}

sub board_selection {
    print "\nChoose an option for device selection:\n";
    print "  [M] type the board's model directly\n";
    print "  [L] List available devices\n";
    print "Your choice (M/L): \n";
    
    my $choice = <STDIN>;
    chomp($choice);
    $choice = uc($choice);  # Normalize to uppercase

    if ($choice eq 'M') {
        print "Enter the board's model: ";
        $board = <STDIN>;
        chomp($board);
        print "‚úÖ You entered board: $board\nbuilding...\n";
        sleep 3; # Waits for user to press Enter
        return $board;
    }
    elsif ($choice eq 'L') {
        print "üìã Listing available devices. Please note down the device model in order to enter it manually afterwards...\nPress enter to continue\n";
        <STDIN>; # Waits for user to press Enter

        my $boards_file = '/home/blist'; # Variable to store the list of available boards supported by zephyr using west.
        my @boards_lines;

        my $exit_code = system("bash -c '
        source \"$current_dir/.venv/bin/activate\" &&
        cd  \"$zephyr_dir\" &&
        west boards | sort > /home/blist'");
        
        #Check if command succeeded
        if ($exit_code =! 0) {
            my $code = $exit_code >> 8;
            print "‚ùå Failed to list available boards $code.\n";
        }
        
        system("echo 'Virtual environment deactivated'");
        
        open my $fh, '<', '/home/blist' or die "Could not open 'blist': $!";
        print "‚úÖ List of Boards succeeded with west.\nAvailable boards are:\n";
        @boards_lines = <$fh>;
        close $fh;

        # Remove newline characters if needed
        chomp @boards_lines;

        # Print to verify
        foreach my $boards_line (@boards_lines) {
            print " - $boards_line\n";
        }

        print "üìù Please enter the model (only complete name):";
        $board = <STDIN>; # Reads input from the user
        chomp($board);
        return $board;
    }
    else {
        print "‚ö†Ô∏è Invalid choice. Please enter M or L.\n";
        board_selection();
        # Optionally, you could loop until valid input is received
    }

}

# Track missing packages
my @missing;
my $target_dir = cwd();  # Get current working directory
$target_dir .= "/zephyrproject";

# Check if `zephyrproject` exists inside the given directory
if (-d $target_dir) {
    print "‚úÖ Directory '$target_dir' exists!\n";
} else {
    print "‚ùå Directory '$target_dir' does NOT exist!\n";
    print "To create zephyrproject directory\n";
    system("mkdir $target_dir");
}

#Get pwd via cwd
$current_dir = $build_base; # Stores the current directory
my $status = system("bash -c 'dpkg -s python3-venv >/dev/null 2>&1'");
$current_dir = $target_dir;

# Start navigation from 'zephyrproject'
chdir("$target_dir") or die "Failed to enter 'zephyrproject': $!\n";
system("bash -c '
python3 -m venv $current_dir/.venv &&
pwd &&
source $current_dir/.venv/bin/activate &&
deactivate'");

$zephyr_dir = $current_dir;
$zephyr_dir .= "/zephyr";

system("bash -c '
source $current_dir/.venv/bin/activate &&
cd  $current_dir &&

pip install west &&

if [ -d .west ]; then echo \"Workspace already initialized.\"; else west init -m https://github.com/harfuchcardenas/zephyr.git --mr master; fi &&

west update &&
west zephyr-export &&
west packages pip --install &&
cd $zephyr_dir &&
west sdk install &&
deactivate'") == 0
or die "Could not update west, virtual environment deactivated: $!";
system("echo 'Virtual environment deactivated'");

# Store final directory choice
my $src_dir = navigate_directory(); #Correct directory of source code.

my $boards_dir = $zephyr_dir;
$boards_dir .= "/boards";

chdir("$boards_dir") or die "Failed to enter board directory' $boards_dir': $!\n";

my $board_selection = $board; #Correct directory board.

system("bash -c '
source $current_dir/.venv/bin/activate &&
cd  $zephyr_dir &&
west build -p always -b $board --source-dir $src_dir --build-dir $current_dir/zephyr/build && deactivate'") == 0
    or die "Could not update west: $!";
system("echo 'Virtual environment deactivated'");
exit 0;
